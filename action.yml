name: Issue SSL certificate
description: Issue SSL certificate with acme.sh's DNS API mode.
branding:
  icon: lock
  color: green
inputs:
  version:
    description: The version of acme.sh. By default the latest version is used.
    required: false
    default: ''
  account-conf-content:
    description: (Deprecated, please use "account-tar") The text content of your `account.conf`, should be stored in secrets. If not specfied you should provide your DNS API token with environment variables.
    required: false
    default: ''
  account-tar:
    description: Base64 encoded tar file content of your account files in `~/.acme.sh` (i.e. output of `tar cz ca account.conf | base64 -w0` in your `~/.acme.sh` directory).
    required: false
    default: ''
  domains:
    description: The list of domains you want to issue certificate for. Separated by any blank characters (allowing newlines). Overrided by `domains-file` field.
    required: false
    default: ''
  domains-file:
    description: The file containing a list of domains you want to issue certificate for. Separated by any blank characters (allowing newlines). Overrides `domains` field.
    required: false
    default: ''
  append-wildcard:
    description: Whether to add a wildcard entry for each of your domain in `domains`.
    required: false
    default: true
  arguments:
    description: The arguments to pass to acme.sh (will be prepended to all `-d domain.name` items). The first argument `--issue` should be omitted. For example `--dns dns_cf --challenge-alias example.com`. Overrided by `arguments-file` field.
    required: false
    default: ''
  arguments-file:
    description: The file containing arguments to pass to acme.sh (will be prepended to all `-d domain.name` items). The first argument `--issue` should be omitted. For example `--dns dns_cf --challenge-alias example.com`. Overrides `arguments` field.
    required: false
    default: ''
  output-fullchain:
    description: The target path for the issued certificate's fullchain PEM file. Omit if you don't need.
    required: false
    default: ''
  output-key:
    description: The target path for the issued certificate's private key PEM file. Omit if you don't need.
    required: false
    default: ''
  output-pfx:
    description: The target path for the issued certificate's PKCS#12 certificate file. Please also specify the `output-pfx-password` option. Omit if you don't need.
    required: false
    default: ''
  output-pfx-password:
    description: The password for the output PKCS#12 certificate file. Ignored when `output-pfx` is not specfied.
    required: false
    default: ''
  uninstall:
    description: Whether or not to uninstall acme.sh after running this action. Use `false` to keep.
    required: false
    default: true
runs:
  using: "composite"
  steps:
    - name: Install acme.sh
      run: curl https://get.acme.sh | sh
      shell: bash
      env:
        BRANCH: ${{ inputs.version }}
    - name: Extract account files for acme.sh
      run: |
        if ! [[ -z "$ACME_SH_INPUT_ACCOUNT_CONF_CONTENT" ]]; then
          echo "$ACME_SH_INPUT_ACCOUNT_CONF_CONTENT" > ~/.acme.sh/account.conf
        fi

        if ! [[ -z "$ACME_SH_INPUT_ACCOUNT_TAR" ]]; then
          echo "$ACME_SH_INPUT_ACCOUNT_TAR" | base64 -d | tar -C ~/.acme.sh -xz
        fi
      shell: bash
      env:
        ACME_SH_INPUT_ACCOUNT_CONF_CONTENT: ${{ inputs.account-conf-content }}
        ACME_SH_INPUT_ACCOUNT_TAR: ${{ inputs.account-tar }}
    - name: Preprocess domain list
      run: |
        if ! [[ -z "$ACME_SH_INPUT_DOMAINS_FILE" ]]; then
            ACME_SH_INPUT_DOMAINS="$(cat "$ACME_SH_INPUT_DOMAINS_FILE")"
        fi
        ACME_SH_DOMAINS="$(echo "$ACME_SH_INPUT_DOMAINS" | xargs)"
        ACME_SH_FIRST_DOMAIN="$(cut -d ' ' -f1 <<< "$ACME_SH_DOMAINS")"
        if [[ -z "$ACME_SH_FIRST_DOMAIN" ]]; then
            echo 'No domains!'
            exit 1
        fi
        ACME_SH_DOMAIN_REGEX='([A-Za-z0-9\.\*-]+)'
        if [[ "$ACME_SH_APPEND_WILDCARD" == "true" ]]; then
            ACME_SH_DOMAINS="$(sed -E "s/$ACME_SH_DOMAIN_REGEX/\1 *.\1/g" <<< "$ACME_SH_DOMAINS")"
        fi
        # Strip domains included in wildcards
        ACME_SH_DOMAINS="$(python3 -c "import sys; l = sys.stdin.read().strip().split(' '); l1 = [s.split('.') for s in l]; l2 = ['.'.join(x) for x in l1 if x[0] == '*' or ['*'] + x[1:] not in l1]; print(' '.join(l2))" <<< "$ACME_SH_DOMAINS")"
        ACME_SH_ARGS_DOMAIN_LINES="$(sed -E "s/$ACME_SH_DOMAIN_REGEX/-d '\1'/g" <<< "$ACME_SH_DOMAINS" | tr " " "\n")"
        # Workaround actions#runner/789
        ACME_SH_GITHUB_ENV_CONTENT="$(cat "$GITHUB_ENV")"
        echo "$ACME_SH_GITHUB_ENV_CONTENT" | grep -v "^ACME_SH_FIRST_DOMAIN=" | grep -v "^ACME_SH_ARGS_DOMAINS=" > "$GITHUB_ENV"
        echo "ACME_SH_FIRST_DOMAIN=$ACME_SH_FIRST_DOMAIN" >> "$GITHUB_ENV"
        echo "ACME_SH_ARGS_DOMAIN_LINES<<EOF" >> "$GITHUB_ENV"
        echo "$ACME_SH_ARGS_DOMAIN_LINES" >> "$GITHUB_ENV"
        echo "EOF" >> "$GITHUB_ENV"
      shell: bash
      env:
        ACME_SH_INPUT_DOMAINS: ${{ inputs.domains }}
        ACME_SH_INPUT_DOMAINS_FILE: ${{ inputs.domains-file }}
        ACME_SH_APPEND_WILDCARD: ${{ inputs.append-wildcard }}
    - name: Issue certificate
      run: |
        if ! [[ -z "$ACME_SH_INPUT_ARGS_PREPENDED_FILE" ]]; then
            ACME_SH_INPUT_ARGS_PREPENDED="$(cat "$ACME_SH_INPUT_ARGS_PREPENDED_FILE")"
        fi
        if [[ -z "$ACME_SH_INPUT_ARGS_PREPENDED" ]]; then
            echo 'No arguments!'
            exit 1
        fi

        function acme_sh_issue() {
            echo "$ACME_SH_INPUT_ARGS_PREPENDED" "$1" | xargs ~/.acme.sh/acme.sh --issue
        }

        if ! acme_sh_issue "$ACME_SH_ARGS_DOMAIN_LINES"; then
            # Workaround acmesh-official/acme.sh#3748
            ACME_SH_ISSUE_BATCH_SIZE=10
            ACME_SH_TOTAL_DOMAINS="$(wc -l <<< "$ACME_SH_ARGS_DOMAIN_LINES")"
            for ((i = ACME_SH_ISSUE_BATCH_SIZE; i - ACME_SH_ISSUE_BATCH_SIZE < ACME_SH_TOTAL_DOMAINS; i += ACME_SH_ISSUE_BATCH_SIZE)); do
                ACME_SH_ARGS_DOMAINS="$(echo "$ACME_SH_ARGS_DOMAIN_LINES" | head -n "$i" | xargs)"
                acme_sh_issue "$ACME_SH_ARGS_DOMAINS"

                if [[ "$i" != "$ACME_SH_TOTAL_DOMAINS" ]]; then
                    echo Sleeping for 30s before next attempt.
                    sleep 30
                fi
            done
        fi
      shell: bash
      env:
        ACME_SH_INPUT_ARGS_PREPENDED: ${{ inputs.arguments }}
        ACME_SH_INPUT_ARGS_PREPENDED_FILE: ${{ inputs.arguments-file }}
    - name: Copy certificate to output paths
      run: |
        ACME_SH_TEMP_DIR="$(mktemp -d)"
        ACME_SH_TEMP_FILE_FULLCHAIN="$ACME_SH_TEMP_DIR/fullchain.pem"
        ACME_SH_TEMP_FILE_KEY="$ACME_SH_TEMP_DIR/key.pem"
        ~/.acme.sh/acme.sh --install-cert -d "$ACME_SH_FIRST_DOMAIN" --fullchain-file "$ACME_SH_TEMP_FILE_FULLCHAIN" --key-file "$ACME_SH_TEMP_FILE_KEY"
        [[ -z "$ACME_SH_OUTPUT_FULLCHAIN" ]] || (mkdir -p "$(dirname "$ACME_SH_OUTPUT_FULLCHAIN")" && cp "$ACME_SH_TEMP_FILE_FULLCHAIN" "$ACME_SH_OUTPUT_FULLCHAIN")
        [[ -z "$ACME_SH_OUTPUT_KEY" ]] || (mkdir -p "$(dirname "$ACME_SH_OUTPUT_KEY")" && cp "$ACME_SH_TEMP_FILE_KEY" "$ACME_SH_OUTPUT_KEY")
        [[ -z "$ACME_SH_OUTPUT_PFX" ]] || (mkdir -p "$(dirname "$ACME_SH_OUTPUT_PFX")" && (
            OPENSSL_ARGS_EXTRA=""
            if openssl pkcs12 --help 2>&1 | grep "\-legacy" >/dev/null; then
                OPENSSL_ARGS_EXTRA="-legacy"
            fi
            openssl pkcs12 $OPENSSL_ARGS_EXTRA -export -out "$ACME_SH_OUTPUT_PFX" -in "$ACME_SH_TEMP_FILE_FULLCHAIN" -inkey "$ACME_SH_TEMP_FILE_KEY" -password "pass:$ACME_SH_OUTPUT_PFX_PASSWORD"
        ))
        rm -rf "$ACME_SH_TEMP_DIR"
      shell: bash
      env:
        ACME_SH_OUTPUT_FULLCHAIN: ${{ inputs.output-fullchain }}
        ACME_SH_OUTPUT_KEY: ${{ inputs.output-key }}
        ACME_SH_OUTPUT_PFX: ${{ inputs.output-pfx }}
        ACME_SH_OUTPUT_PFX_PASSWORD: ${{ inputs.output-pfx-password }}
    - name: Uninstall acme.sh
      if: ${{ inputs.uninstall != 'false' }}
      run: |
        ~/.acme.sh/acme.sh --uninstall
        rm -rf ~/.acme.sh
      shell: bash
